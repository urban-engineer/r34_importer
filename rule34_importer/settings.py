"""
Django settings for rule34_importer project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import mimetypes
from pathlib import Path

from utils import config


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
temp_security_key = config.load_django_config()["secret-key"]
if temp_security_key == "you-should-replace-this":
    raise RuntimeError("config/config.json has not been updated, secret key still default!")

SECRET_KEY = temp_security_key

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Insecure, I know, but this is an internal web app.  If you expose it to the public internet, you deserve
# whatever pain you get.  And that goes double for me, because I'm an idiot.
ALLOWED_HOSTS = [
    "*"
]


# Application definition

INSTALLED_APPS = [
    "importer.apps.ImporterConfig",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'rule34_importer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'rule34_importer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

database_info = config.load_django_config()["postgres"]
if database_info["host"] == "rule34_importer_database_host":
    raise RuntimeError("config/config.json has not been updated, database host still default!")
if database_info["name"] == "rule34_importer":
    raise RuntimeError("config/config.json has not been updated, database name still default!")
if database_info["user"] == "rule34_importer_user":
    raise RuntimeError("config/config.json has not been updated, database user still default!")
if database_info["password"] == "rule34_importer_password":
    raise RuntimeError("config/config.json has not been updated, database password still default!")

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": config.load_django_config()["postgres"]["host"],
        "PORT": config.load_django_config()["postgres"]["post"],
        "NAME": config.load_django_config()["postgres"]["name"],
        "USER": config.load_django_config()["postgres"]["user"],
        "PASSWORD": config.load_django_config()["postgres"]["password"],
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = config.get_config_directory().parent.joinpath("static")

# TODO: improve the general tags editing, this is a hack.
# This matters when processing the general tags as one big edit, sends way too many fields.
# Figure out a way to check if a value is modified (javascript does that, I think.  adj mentioned it)
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000
